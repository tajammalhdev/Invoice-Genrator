// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  clients       Client[]
  invoices      Invoice[]
  settings      Setting?
}

model Setting {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyName  String?
  companyEmail String?
  companyPhone String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?

  currency          String? @default("USD")
  dateFormat        String? @default("yyyy-MM-dd")
  taxRate           Float?  @default(0)
  invoicePrefix     String? @default("INV-")
  nextInvoiceNumber Int?    @default(1)
  logoUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
}

model Invoice {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  number      String        @unique
  issueDate   DateTime
  dueDate     DateTime
  notes       String?
  status      InvoiceStatus @default(DRAFT)
  items       InvoiceItem[]
  payments    Payment[]
  discount    Float         @default(0)
  subtotal    Float         @default(0)
  tax         Float         @default(0)
  total       Float         @default(0)
  paidTotal   Float         @default(0)
  paymentTerm PaymentTerm   @default(NET30)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  description String?
  quantity    Int     @default(1)
  unitPrice   Float   @default(0)
  total       Float   @default(0)
}

model Payment {
  id         String   @id @default(cuid())
  invoiceId  String
  invoice    Invoice  @relation(fields: [invoiceId], references: [number], onDelete: Cascade)
  amount     Float    @default(0)
  method     String?
  receivedAt DateTime @default(now())
}

model Client {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  name       String
  email      String
  company    String?
  phone      String?
  address    String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  invoices   Invoice[]
}

enum PaymentTerm {
  NET1
  NET7
  NET14
  NET30
}
